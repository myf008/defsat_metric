<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
	     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		 http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

    <description>Spring公共配置</description>
	<context:component-scan base-package="com.defsat.metric.admin" />
    <context:annotation-config />
    <context:property-placeholder location="classpath:jdbc.properties,classpath:kafka_consumer.properties" ignore-unresolvable="true" />
    <mvc:default-servlet-handler />
    
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
    <bean id="kafkaConsumerConfig" class="com.defsat.metric.admin.config.KafkaConsumerConfig">
    	<constructor-arg name="servers" value="${bootstrap.servers}"/>
    	<constructor-arg name="keyDeserializer" value="${key.deserializer}"/>
    	<constructor-arg name="valueDeserializer" value="${value.deserializer}"/>
    	<constructor-arg name="groupId" value="${group.id}"/>
    	<constructor-arg name="isAutoCommit" value="${enable.auto.commit}"/>
    	<constructor-arg name="commitInterval" value="${auto.commit.interval.ms}"/>
    	<constructor-arg name="autoOffsetreset" value="${auto.offset.reset}"/>
    	<constructor-arg name="topics" value="${topics}"/>
    	<constructor-arg name="consumerNum" value="${consumerNum}"/>
    </bean>
    
    
    <bean id="storageType" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">    
        <property name="staticField" value="com.defsat.metric.storage.StorageType.INFLUXDB" />    
	</bean> 
    	
    <!-- metricConfig配置 -->
    <bean id="metricConfig" class="com.defsat.metric.config.MetricConfig">
    	<property name="bufferSize" value="1024"/>
    	<property name="workerSize" value="10"/>
    	<property name="workerBufSize" value="10"/>
    	<property name="storageType" ref="storageType"/>
    </bean>
    
    <bean id="ringBuffer" class="com.defsat.metric.core.RingBuffer">
    	<constructor-arg name="config" ref="metricConfig"/>
    </bean>
    
    <bean id="adminConnectorHandler" class="com.defsat.metric.admin.core.AdminConnectorHandler">
    </bean>
    
    <bean id="sendAgentGroup" class="com.defsat.metric.storage.SendAgentGroup">
    	<constructor-arg name="config" ref="metricConfig"/>
    	<constructor-arg name="connHandler" ref="adminConnectorHandler"/>
    </bean>

    <!-- 数据源配置, 使用druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
		init-method="init" destroy-method="close"> 
		<!-- 基本属性 url、user、password --> 
		<property name="driverClassName" value="${jdbc.driver}" /> 
		<property name="url" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.username}" /> 
		<property name="password" value="${jdbc.password}" /> 
		
		<!-- 配置初始化大小、最小、最大 --> 
		<property name="initialSize" value="${druid.initialSize}" /> 
		<property name="minIdle" value="${druid.minIdle}" /> 
		<property name="maxActive" value="${druid.maxActive}" /> 
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" /> 
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" /> 
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" /> 
		
		<property name="validationQuery" value="${druid.validationQuery}" /> 
		<property name="testWhileIdle" value="${druid.testWhileIdle}" /> 
		<property name="testOnBorrow" value="${druid.testOnBorrow}" /> 
		<property name="testOnReturn" value="${druid.testOnReturn}" /> 
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" /> 
		<property name="maxPoolPreparedStatementPerConnectionSize" 
		value="${druid.maxPoolPreparedStatementPerConnectionSize}" /> 
		
		<property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}" /> 
	</bean> 
    
	

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.defsat.metric.admin.dao.daoobject" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mapper/*.xml" />
	</bean>

	<!-- 扫描mybatits的basePackage下的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.defsat.metric.admin.dao.daointerface" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	

</beans>